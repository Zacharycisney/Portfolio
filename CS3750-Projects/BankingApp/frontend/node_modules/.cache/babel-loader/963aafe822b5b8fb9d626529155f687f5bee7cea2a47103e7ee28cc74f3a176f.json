{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\zacci\\\\OneDrive\\\\Desktop\\\\Quick Drop\\\\Summer 2024\\\\CS 3750\\\\CS-3750\\\\BankingApp\\\\frontend\\\\src\\\\components\\\\shared\\\\transactionHistory.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport axios from 'axios';\n\n// This function will show the logged-in user’s transactions and allows employees or admins to search for other accounts’ transaction histories\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function TransactionHistory({\n  customerAccountId\n}) {\n  _s();\n  const [accountId, setAccountId] = useState('');\n  const [transactions, setTransactions] = useState([]);\n  const [accountType, setAccountType] = useState('all'); // Default to 'all' for full history\n  const [message, setMessage] = useState('');\n  const [view, setView] = useState('my'); // Set view based on role\n  const [currentCustomerId, setCurrentCustomerId] = useState(''); // Track the current customer being viewed\n  const [searchedCustomerName, setSearchedCustomerName] = useState(''); // Track the name of the searched customer\n  const [storedUser, setStoredUser] = useState(null);\n  useEffect(() => {\n    const user = JSON.parse(localStorage.getItem('user'));\n    if (user) {\n      setStoredUser(user);\n      setCurrentCustomerId(user.customerID); // Set the default customerID to the logged-in user\n      setView('my'); // Explicitly set to 'my'\n      fetchTransactions(user.customerID);\n    }\n  }, []);\n  const handleInputChange = e => setAccountId(e.target.value);\n  const handleAccountTypeChange = type => {\n    setAccountType(type);\n    if (view === 'my') {\n      if (storedUser) {\n        setCurrentCustomerId(storedUser.customerID);\n        if (type === 'all') {\n          fetchTransactions(storedUser.customerID);\n        } else {\n          fetchAccountTransactions(storedUser.customerID, type);\n        }\n      }\n    } else if (view === 'customer' && currentCustomerId) {\n      if (type === 'all') {\n        fetchTransactions(currentCustomerId);\n      } else {\n        fetchAccountTransactions(currentCustomerId, type);\n      }\n    }\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!accountId) {\n      setMessage('Please enter a customer ID');\n      return;\n    }\n    setCurrentCustomerId(accountId); // Set the current customer ID to the searched ID\n    try {\n      const response = await axios.get(`http://localhost:4000/findCustomer`, {\n        params: {\n          customerID: accountId\n        }\n      });\n      if (response.data) {\n        const {\n          firstName,\n          lastName\n        } = response.data;\n        setSearchedCustomerName(`${firstName} ${lastName}`);\n      }\n      if (accountType === 'all') {\n        fetchTransactions(accountId);\n      } else {\n        fetchAccountTransactions(accountId, accountType);\n      }\n    } catch (error) {\n      setMessage('Customer not found');\n    }\n  };\n  const handleMyTransactions = () => {\n    if (storedUser) {\n      setCurrentCustomerId(storedUser.customerID); // Reset to the logged-in user's customerID\n      setView('my');\n      setAccountType('all'); // Reset account type to 'all'\n      setSearchedCustomerName(''); // Clear searched name\n      fetchTransactions(storedUser.customerID);\n    }\n  };\n  const handleCustomerTransactions = () => {\n    setView('customer');\n    if (accountId) {\n      setCurrentCustomerId(accountId); // Set the current customer ID to the searched ID\n      if (accountType === 'all') {\n        fetchTransactions(accountId);\n      } else {\n        fetchAccountTransactions(accountId, accountType);\n      }\n    }\n  };\n  const fetchTransactions = async customerID => {\n    try {\n      const response = await axios.get(`http://localhost:4000/customerTransactions`, {\n        params: {\n          customerID\n        }\n      });\n      if (response.status === 200 && response.data.length > 0) {\n        setTransactions(response.data);\n        setMessage('');\n      } else {\n        setTransactions([]);\n        setMessage('No transactions found for this customer');\n      }\n    } catch (error) {\n      console.error('Error fetching transactions:', error);\n      setTransactions([]);\n      setMessage('Error fetching transactions');\n    }\n  };\n  const fetchAccountTransactions = async (customerID, account) => {\n    try {\n      const response = await axios.get(`http://localhost:4000/customerAccountTransactions`, {\n        params: {\n          customerID,\n          account\n        }\n      });\n      if (response.status === 200 && response.data.length > 0) {\n        setTransactions(response.data);\n        setMessage('');\n      } else {\n        setTransactions([]);\n        setMessage('No transactions found for this account');\n      }\n    } catch (error) {\n      console.error('Error fetching transactions:', error);\n      setTransactions([]);\n      setMessage('Error fetching transactions');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container my-4\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card p-4 shadow-sm\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-center mb-4\",\n        children: \"Transaction History\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 17\n      }, this), storedUser && storedUser.role !== 'customer' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-3 d-flex justify-content-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-check form-check-inline\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"form-check-input\",\n              type: \"radio\",\n              name: \"historyType\",\n              id: \"myHistory\",\n              value: \"my\",\n              checked: view === 'my',\n              onChange: handleMyTransactions\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 146,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"form-check-label\",\n              htmlFor: \"myHistory\",\n              children: \"My Transaction History\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 155,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-check form-check-inline\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"form-check-input\",\n              type: \"radio\",\n              name: \"historyType\",\n              id: \"customerHistory\",\n              value: \"customer\",\n              checked: view === 'customer',\n              onChange: handleCustomerTransactions\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 160,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"form-check-label\",\n              htmlFor: \"customerHistory\",\n              children: \"Customer Transaction History\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 169,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 25\n        }, this), view === 'customer' && /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSubmit,\n          className: \"mb-4\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"d-flex justify-content-between mb-3\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              id: \"accountId\",\n              value: accountId,\n              onChange: handleInputChange,\n              className: \"form-control me-2\",\n              placeholder: \"Enter Customer ID\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 178,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"submit\",\n              className: \"btn btn-success\",\n              children: \"Search\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 186,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 29\n        }, this), view === 'customer' && searchedCustomerName && /*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"transactions-for-label mb-3\",\n          children: [\"Transactions for: \", searchedCustomerName]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"d-flex justify-content-center mb-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: `btn ${accountType === 'all' ? 'btn-primary' : 'btn-outline-primary'} mx-1`,\n          onClick: () => handleAccountTypeChange('all'),\n          children: \"All\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `btn ${accountType === 'checking' ? 'btn-primary' : 'btn-outline-primary'} mx-1`,\n          onClick: () => handleAccountTypeChange('checking'),\n          children: \"Checking\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `btn ${accountType === 'savings' ? 'btn-primary' : 'btn-outline-primary'} mx-1`,\n          onClick: () => handleAccountTypeChange('savings'),\n          children: \"Savings\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `btn ${accountType === 'investment' ? 'btn-primary' : 'btn-outline-primary'} mx-1`,\n          onClick: () => handleAccountTypeChange('investment'),\n          children: \"Investment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 17\n      }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-danger\",\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 29\n      }, this), transactions.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"mb-3\",\n          children: \"Transactions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"table-responsive\",\n          style: {\n            maxHeight: '300px',\n            overflowY: 'auto'\n          },\n          children: /*#__PURE__*/_jsxDEV(\"table\", {\n            className: \"table table-striped\",\n            children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n              children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Date\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 233,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Type\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 234,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Amount\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 235,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Account Type\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 236,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 232,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 231,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n              children: transactions.map(transaction => /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  children: new Date(transaction.dateTime).toLocaleDateString()\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 242,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: transaction.transaction_type\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 243,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: [\"$\", transaction.amount.toFixed(2)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 244,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: transaction.account\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 245,\n                  columnNumber: 45\n                }, this)]\n              }, transaction._id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 241,\n                columnNumber: 41\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 239,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 138,\n    columnNumber: 9\n  }, this);\n}\n_s(TransactionHistory, \"c33KGWu+0pkNRQvkGtW1mwVm35s=\");\n_c = TransactionHistory;\nvar _c;\n$RefreshReg$(_c, \"TransactionHistory\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","TransactionHistory","customerAccountId","_s","accountId","setAccountId","transactions","setTransactions","accountType","setAccountType","message","setMessage","view","setView","currentCustomerId","setCurrentCustomerId","searchedCustomerName","setSearchedCustomerName","storedUser","setStoredUser","user","JSON","parse","localStorage","getItem","customerID","fetchTransactions","handleInputChange","e","target","value","handleAccountTypeChange","type","fetchAccountTransactions","handleSubmit","preventDefault","response","get","params","data","firstName","lastName","error","handleMyTransactions","handleCustomerTransactions","status","length","console","account","className","children","fileName","_jsxFileName","lineNumber","columnNumber","role","name","id","checked","onChange","htmlFor","onSubmit","placeholder","onClick","style","maxHeight","overflowY","map","transaction","Date","dateTime","toLocaleDateString","transaction_type","amount","toFixed","_id","_c","$RefreshReg$"],"sources":["C:/Users/zacci/OneDrive/Desktop/Quick Drop/Summer 2024/CS 3750/CS-3750/BankingApp/frontend/src/components/shared/transactionHistory.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport axios from 'axios';\r\n\r\n// This function will show the logged-in user’s transactions and allows employees or admins to search for other accounts’ transaction histories\r\nexport default function TransactionHistory({ customerAccountId }) {\r\n    const [accountId, setAccountId] = useState('');\r\n    const [transactions, setTransactions] = useState([]);\r\n    const [accountType, setAccountType] = useState('all'); // Default to 'all' for full history\r\n    const [message, setMessage] = useState('');\r\n    const [view, setView] = useState('my'); // Set view based on role\r\n    const [currentCustomerId, setCurrentCustomerId] = useState(''); // Track the current customer being viewed\r\n    const [searchedCustomerName, setSearchedCustomerName] = useState(''); // Track the name of the searched customer\r\n    const [storedUser, setStoredUser] = useState(null);\r\n\r\n    useEffect(() => {\r\n        const user = JSON.parse(localStorage.getItem('user'));\r\n        if (user) {\r\n            setStoredUser(user);\r\n            setCurrentCustomerId(user.customerID); // Set the default customerID to the logged-in user\r\n            setView('my'); // Explicitly set to 'my'\r\n            fetchTransactions(user.customerID);\r\n        }\r\n    }, []);\r\n\r\n    const handleInputChange = (e) => setAccountId(e.target.value);\r\n\r\n    const handleAccountTypeChange = (type) => {\r\n        setAccountType(type);\r\n\r\n        if (view === 'my') {\r\n            if (storedUser) {\r\n                setCurrentCustomerId(storedUser.customerID);\r\n                if (type === 'all') {\r\n                    fetchTransactions(storedUser.customerID);\r\n                } else {\r\n                    fetchAccountTransactions(storedUser.customerID, type);\r\n                }\r\n            }\r\n        } else if (view === 'customer' && currentCustomerId) {\r\n            if (type === 'all') {\r\n                fetchTransactions(currentCustomerId);\r\n            } else {\r\n                fetchAccountTransactions(currentCustomerId, type);\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        if (!accountId) {\r\n            setMessage('Please enter a customer ID');\r\n            return;\r\n        }\r\n        \r\n        setCurrentCustomerId(accountId); // Set the current customer ID to the searched ID\r\n        try {\r\n            const response = await axios.get(`http://localhost:4000/findCustomer`, {\r\n                params: { customerID: accountId }\r\n            });\r\n\r\n            if (response.data) {\r\n                const { firstName, lastName } = response.data;\r\n                setSearchedCustomerName(`${firstName} ${lastName}`);\r\n            }\r\n\r\n            if (accountType === 'all') {\r\n                fetchTransactions(accountId);\r\n            } else {\r\n                fetchAccountTransactions(accountId, accountType);\r\n            }\r\n        } catch (error) {\r\n            setMessage('Customer not found');\r\n        }\r\n    };\r\n\r\n    const handleMyTransactions = () => {\r\n        if (storedUser) {\r\n            setCurrentCustomerId(storedUser.customerID); // Reset to the logged-in user's customerID\r\n            setView('my');\r\n            setAccountType('all'); // Reset account type to 'all'\r\n            setSearchedCustomerName(''); // Clear searched name\r\n            fetchTransactions(storedUser.customerID);\r\n        }\r\n    };\r\n\r\n    const handleCustomerTransactions = () => {\r\n        setView('customer');\r\n        if (accountId) {\r\n            setCurrentCustomerId(accountId); // Set the current customer ID to the searched ID\r\n            if (accountType === 'all') {\r\n                fetchTransactions(accountId);\r\n            } else {\r\n                fetchAccountTransactions(accountId, accountType);\r\n            }\r\n        }\r\n    };\r\n\r\n    const fetchTransactions = async (customerID) => {\r\n        try {\r\n            const response = await axios.get(`http://localhost:4000/customerTransactions`, {\r\n                params: { customerID }\r\n            });\r\n            if (response.status === 200 && response.data.length > 0) {\r\n                setTransactions(response.data);\r\n                setMessage('');\r\n            } else {\r\n                setTransactions([]);\r\n                setMessage('No transactions found for this customer');\r\n            }\r\n        } catch (error) {\r\n            console.error('Error fetching transactions:', error);\r\n            setTransactions([]);\r\n            setMessage('Error fetching transactions');\r\n        }\r\n    };\r\n\r\n    const fetchAccountTransactions = async (customerID, account) => {\r\n        try {\r\n            const response = await axios.get(`http://localhost:4000/customerAccountTransactions`, {\r\n                params: { customerID, account }\r\n            });\r\n            if (response.status === 200 && response.data.length > 0) {\r\n                setTransactions(response.data);\r\n                setMessage('');\r\n            } else {\r\n                setTransactions([]);\r\n                setMessage('No transactions found for this account');\r\n            }\r\n        } catch (error) {\r\n            console.error('Error fetching transactions:', error);\r\n            setTransactions([]);\r\n            setMessage('Error fetching transactions');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"container my-4\">\r\n            <div className=\"card p-4 shadow-sm\">\r\n                <h2 className=\"text-center mb-4\">Transaction History</h2>\r\n\r\n                {storedUser && storedUser.role !== 'customer' && (\r\n                    <>\r\n                        <div className=\"mb-3 d-flex justify-content-center\">\r\n                            <div className=\"form-check form-check-inline\">\r\n                                <input\r\n                                    className=\"form-check-input\"\r\n                                    type=\"radio\"\r\n                                    name=\"historyType\"\r\n                                    id=\"myHistory\"\r\n                                    value=\"my\"\r\n                                    checked={view === 'my'}\r\n                                    onChange={handleMyTransactions}\r\n                                />\r\n                                <label className=\"form-check-label\" htmlFor=\"myHistory\">\r\n                                    My Transaction History\r\n                                </label>\r\n                            </div>\r\n                            <div className=\"form-check form-check-inline\">\r\n                                <input\r\n                                    className=\"form-check-input\"\r\n                                    type=\"radio\"\r\n                                    name=\"historyType\"\r\n                                    id=\"customerHistory\"\r\n                                    value=\"customer\"\r\n                                    checked={view === 'customer'}\r\n                                    onChange={handleCustomerTransactions}\r\n                                />\r\n                                <label className=\"form-check-label\" htmlFor=\"customerHistory\">\r\n                                    Customer Transaction History\r\n                                </label>\r\n                            </div>\r\n                        </div>\r\n\r\n                        {view === 'customer' && (\r\n                            <form onSubmit={handleSubmit} className=\"mb-4\">\r\n                                <div className=\"d-flex justify-content-between mb-3\">\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        id=\"accountId\"\r\n                                        value={accountId}\r\n                                        onChange={handleInputChange}\r\n                                        className=\"form-control me-2\"\r\n                                        placeholder=\"Enter Customer ID\"\r\n                                    />\r\n                                    <button type=\"submit\" className=\"btn btn-success\">Search</button>\r\n                                </div>\r\n                            </form>\r\n                        )}\r\n\r\n                        {view === 'customer' && searchedCustomerName && (\r\n                            <h3 className=\"transactions-for-label mb-3\">Transactions for: {searchedCustomerName}</h3>\r\n                        )}\r\n                    </>\r\n                )}\r\n\r\n                <div className=\"d-flex justify-content-center mb-3\">\r\n                    <button\r\n                        className={`btn ${accountType === 'all' ? 'btn-primary' : 'btn-outline-primary'} mx-1`}\r\n                        onClick={() => handleAccountTypeChange('all')}\r\n                    >\r\n                        All\r\n                    </button>\r\n                    <button\r\n                        className={`btn ${accountType === 'checking' ? 'btn-primary' : 'btn-outline-primary'} mx-1`}\r\n                        onClick={() => handleAccountTypeChange('checking')}\r\n                    >\r\n                        Checking\r\n                    </button>\r\n                    <button\r\n                        className={`btn ${accountType === 'savings' ? 'btn-primary' : 'btn-outline-primary'} mx-1`}\r\n                        onClick={() => handleAccountTypeChange('savings')}\r\n                    >\r\n                        Savings\r\n                    </button>\r\n                    <button\r\n                        className={`btn ${accountType === 'investment' ? 'btn-primary' : 'btn-outline-primary'} mx-1`}\r\n                        onClick={() => handleAccountTypeChange('investment')}\r\n                    >\r\n                        Investment\r\n                    </button>\r\n                </div>\r\n\r\n                {message && <p className=\"text-danger\">{message}</p>}\r\n\r\n                {transactions.length > 0 && (\r\n                    <div>\r\n                        <h3 className=\"mb-3\">Transactions</h3>\r\n                        <div className=\"table-responsive\" style={{ maxHeight: '300px', overflowY: 'auto' }}>\r\n                            <table className=\"table table-striped\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>Date</th>\r\n                                        <th>Type</th>\r\n                                        <th>Amount</th>\r\n                                        <th>Account Type</th>\r\n                                    </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                    {transactions.map(transaction => (\r\n                                        <tr key={transaction._id}>\r\n                                            <td>{new Date(transaction.dateTime).toLocaleDateString()}</td>\r\n                                            <td>{transaction.transaction_type}</td>\r\n                                            <td>${transaction.amount.toFixed(2)}</td>\r\n                                            <td>{transaction.account}</td>\r\n                                        </tr>\r\n                                    ))}\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}