{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\zacci\\\\OneDrive\\\\Desktop\\\\Quick Drop\\\\Summer 2024\\\\CS 3750\\\\CS-3750\\\\BankingApp\\\\frontend\\\\src\\\\components\\\\shared\\\\accountDetails.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\n// Account Details needs to show the most recent transactions and make sure it fetches the correct amount for each account balance.\n// This function will show the account holder's name, account ID, account type, and balance for each account. Along with the most recent transactions.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AccountDetails = ({\n  details,\n  user\n}) => {\n  _s();\n  const [accountDetails, setAccountDetails] = useState(details || null);\n  useEffect(() => {\n    if (!details) {\n      const user = JSON.parse(localStorage.getItem('user'));\n      if (user) {\n        axios.get(`http://localhost:4000/findCustomer`, {\n          body: {\n            customerID: user.customerID\n          }\n        }).then(response => {\n          setAccountDetails(response.data);\n        }).catch(error => {\n          console.error('There was an error fetching the account details!', error);\n        });\n      }\n    }\n  }, [details]);\n  if (!accountDetails) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-center\",\n      children: \"Loading... \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 16\n    }, this);\n  }\n\n  //Limit to 3 most recent transactions\n  const recentTransactions = accountDetails.transactions.slice(0, 3);\n  return (\n    /*#__PURE__*/\n    // <div className=\"container my-4\">\n    //     <div className=\"card shadow\">\n    //         <div className=\"card-body\">\n    //             <h2 className=\"text-center mb-4\">Account Details</h2>\n    //             <div className=\"mb-3\">\n    //                 <p className=\"text-muted mb-1\"><strong>Account Holder:</strong> {accountDetails.accountHolderName}</p>\n    //                 <p className=\"text-muted mb-1\"><strong>Account ID:</strong> {accountDetails.accountHolderID}</p>\n    //                 {accountDetails.accounts.map((account, index) => (\n    //                     <div key={index} className=\"border rounded p-3 mb-3\">\n    //                         <h5 className=\"mb-2\">{account.accountType} Account</h5>\n    //                         <p className=\"mb-1\"><strong>Balance:</strong> ${account.balance.toFixed(2)}</p>\n    //                     </div>\n    //                 ))}\n    //             </div>\n    //             <h4 className=\"text-secondary\">Recent Transactions</h4>\n    //             <div className=\"table-responsive\">\n    //                 <table className=\"table table-striped table-bordered\">\n    //                     <thead className=\"thead-dark\">\n    //                         <tr>\n    //                             <th>Date</th>\n    //                             <th>Type</th>\n    //                             <th>Amount</th>\n    //                             <th>Account Type</th>\n    //                         </tr>\n    //                     </thead>\n    //                     <tbody>\n    //                         {recentTransactions.map(transaction => (\n    //                             <tr key={transaction.id}>\n    //                                 <td>{transaction.date}</td>\n    //                                 <td>{transaction.type}</td>\n    //                                 <td>${transaction.amount.toFixed(2)}</td>\n    //                                 <td>{transaction.accountType}</td>\n    //                             </tr>\n    //                         ))}\n    //                     </tbody>\n    //                 </table>\n    //             </div>\n    //         </div>\n    //     </div>\n    // </div>\n    _jsxDEV(\"p\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }, this)\n  );\n};\n_s(AccountDetails, \"de7LDGmYdrvw+Lt4vPoKde7tynU=\");\n_c = AccountDetails;\nexport default AccountDetails;\nvar _c;\n$RefreshReg$(_c, \"AccountDetails\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","AccountDetails","details","user","_s","accountDetails","setAccountDetails","JSON","parse","localStorage","getItem","get","body","customerID","then","response","data","catch","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","recentTransactions","transactions","slice","_c","$RefreshReg$"],"sources":["C:/Users/zacci/OneDrive/Desktop/Quick Drop/Summer 2024/CS 3750/CS-3750/BankingApp/frontend/src/components/shared/accountDetails.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\n// Account Details needs to show the most recent transactions and make sure it fetches the correct amount for each account balance.\r\n// This function will show the account holder's name, account ID, account type, and balance for each account. Along with the most recent transactions.\r\nconst AccountDetails = ({ details, user }) => {\r\n    const [accountDetails, setAccountDetails] = useState(details || null);\r\n\r\n    useEffect(() => {\r\n        if (!details) {\r\n            const user = JSON.parse(localStorage.getItem('user'));\r\n            if (user) {\r\n                axios.get(`http://localhost:4000/findCustomer`, {\r\n                    body: {\r\n                        customerID: user.customerID\r\n                    }\r\n                })\r\n                .then(response => {\r\n                    setAccountDetails(response.data);\r\n                })\r\n                .catch(error => {\r\n                    console.error('There was an error fetching the account details!', error);\r\n                });\r\n            }\r\n        }\r\n    }, [details]);\r\n\r\n    if (!accountDetails) {\r\n        return <div className=\"text-center\">Loading... </div>;\r\n    }\r\n\r\n    //Limit to 3 most recent transactions\r\n    const recentTransactions = accountDetails.transactions.slice(0, 3);\r\n\r\n    return (\r\n        // <div className=\"container my-4\">\r\n        //     <div className=\"card shadow\">\r\n        //         <div className=\"card-body\">\r\n        //             <h2 className=\"text-center mb-4\">Account Details</h2>\r\n        //             <div className=\"mb-3\">\r\n        //                 <p className=\"text-muted mb-1\"><strong>Account Holder:</strong> {accountDetails.accountHolderName}</p>\r\n        //                 <p className=\"text-muted mb-1\"><strong>Account ID:</strong> {accountDetails.accountHolderID}</p>\r\n\r\n        //                 {accountDetails.accounts.map((account, index) => (\r\n        //                     <div key={index} className=\"border rounded p-3 mb-3\">\r\n        //                         <h5 className=\"mb-2\">{account.accountType} Account</h5>\r\n        //                         <p className=\"mb-1\"><strong>Balance:</strong> ${account.balance.toFixed(2)}</p>\r\n        //                     </div>\r\n        //                 ))}\r\n        //             </div>\r\n        //             <h4 className=\"text-secondary\">Recent Transactions</h4>\r\n        //             <div className=\"table-responsive\">\r\n        //                 <table className=\"table table-striped table-bordered\">\r\n        //                     <thead className=\"thead-dark\">\r\n        //                         <tr>\r\n        //                             <th>Date</th>\r\n        //                             <th>Type</th>\r\n        //                             <th>Amount</th>\r\n        //                             <th>Account Type</th>\r\n        //                         </tr>\r\n        //                     </thead>\r\n        //                     <tbody>\r\n        //                         {recentTransactions.map(transaction => (\r\n        //                             <tr key={transaction.id}>\r\n        //                                 <td>{transaction.date}</td>\r\n        //                                 <td>{transaction.type}</td>\r\n        //                                 <td>${transaction.amount.toFixed(2)}</td>\r\n        //                                 <td>{transaction.accountType}</td>\r\n        //                             </tr>\r\n        //                         ))}\r\n        //                     </tbody>\r\n        //                 </table>\r\n        //             </div>\r\n        //         </div>\r\n        //     </div>\r\n        // </div>\r\n        <p></p>\r\n    );\r\n};\r\n\r\nexport default AccountDetails;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;;AAEzB;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,cAAc,GAAGA,CAAC;EAAEC,OAAO;EAAEC;AAAK,CAAC,KAAK;EAAAC,EAAA;EAC1C,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGV,QAAQ,CAACM,OAAO,IAAI,IAAI,CAAC;EAErEL,SAAS,CAAC,MAAM;IACZ,IAAI,CAACK,OAAO,EAAE;MACV,MAAMC,IAAI,GAAGI,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC;MACrD,IAAIP,IAAI,EAAE;QACNL,KAAK,CAACa,GAAG,CAAC,oCAAoC,EAAE;UAC5CC,IAAI,EAAE;YACFC,UAAU,EAAEV,IAAI,CAACU;UACrB;QACJ,CAAC,CAAC,CACDC,IAAI,CAACC,QAAQ,IAAI;UACdT,iBAAiB,CAACS,QAAQ,CAACC,IAAI,CAAC;QACpC,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAI;UACZC,OAAO,CAACD,KAAK,CAAC,kDAAkD,EAAEA,KAAK,CAAC;QAC5E,CAAC,CAAC;MACN;IACJ;EACJ,CAAC,EAAE,CAAChB,OAAO,CAAC,CAAC;EAEb,IAAI,CAACG,cAAc,EAAE;IACjB,oBAAOL,OAAA;MAAKoB,SAAS,EAAC,aAAa;MAAAC,QAAA,EAAC;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EACzD;;EAEA;EACA,MAAMC,kBAAkB,GAAGrB,cAAc,CAACsB,YAAY,CAACC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;EAElE;IAAA;IACI;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA5B,OAAA;MAAAsB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM;EAAC;AAEf,CAAC;AAACrB,EAAA,CAzEIH,cAAc;AAAA4B,EAAA,GAAd5B,cAAc;AA2EpB,eAAeA,cAAc;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}